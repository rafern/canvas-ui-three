import{Root as r,defaultTheme as e,defaultVirtualKeyboardTemplate as t,VirtualKeyboard as s,getPointerEventNormPos as i,RayPointerDriver as n,PointerHint as o}from"canvas-ui";import{CanvasTexture as a,PlaneGeometry as l,MeshBasicMaterial as h,Mesh as c,Object3D as u,Vector2 as d,Raycaster as v,Ray as p,Vector3 as y}from"three";class m extends r{constructor(r,t=null,s=null,i=e){super(r,t,i),this.texture=new a(this.viewport.canvas);const n=new l,o=new h({map:this.texture});o.transparent=!0;const d=new c(n,o);this.mesh=new u,this.mesh.add(d),this.transformAlgorithm=s}set enabled(r){super.enabled=r,this.mesh.visible=r}get enabled(){return super.enabled}resolveLayout(){const r=super.resolveLayout();if(r){const[r,e]=this.dimensions,[t,s]=this.canvasDimensions,i=r/t,n=e/s;this.texture.offset=new d(0,1-n),this.texture.repeat=new d(i,n),this.mesh.children[0].scale.fromArray([r,e,1])}return r}paint(){const r=super.paint();return r&&(this.texture.needsUpdate=!0),null!==this.transformAlgorithm&&(this.transformAlgorithm(this),this.mesh.matrixWorldNeedsUpdate=!0),r}}class g extends m{constructor(r,i=t,n=null,o=null,a=e){super(new s(r,i),n,o,a),this.keyboardDriver=r}updateVisibility(){this.enabled=null!==this.keyboardDriver.getFocusedRoot()}}class f{constructor(r,e){this.raycaster=new v,this.driver=null,this._pointer=-1,this.raycaster.camera=r,e.addEventListener("pointermove",(r=>{r.isPrimary&&this.castRay(...i(r,e))})),e.addEventListener("pointerdown",(r=>{r.isPrimary&&this.castRay(...i(r,e),!0)})),e.addEventListener("pointerup",(r=>{r.isPrimary&&this.castRay(...i(r,e),!1)})),e.addEventListener("pointerleave",(r=>{r.isPrimary&&null!==this.driver&&this.driver.leaveAnyPointer(this._pointer)}))}get pointer(){return-1===this._pointer?null:this._pointer}castRay(r,e,t=null){null!==this.driver&&(this.raycaster.setFromCamera({x:2*r-1,y:2*e-1},this.raycaster.camera),this.driver.handlePointerRay(this._pointer,t,this.raycaster.ray.origin.toArray(),this.raycaster.ray.direction.toArray()))}setRayPointerDriver(r){null!==this.driver&&this.clearRayPointerDriver(),this._pointer=r.registerPointer(),this.driver=r}clearRayPointerDriver(){var r;-1!==this._pointer&&(null===(r=this.driver)||void 0===r||r.unregisterPointer(this._pointer)),this.driver=null,this._pointer=-1}onPointerHintChanged(r,e){}}class P extends n{constructor(r){super(),this.raycaster=new v,this.raycaster.camera=r}castRay(r,e){this.raycaster.ray=new p(new y(...r),new y(...e));const t=new Map;for(const r of this.states.keys())r instanceof m&&t.set(r.mesh,r);const s=Array.from(t.keys()),i=this.raycaster.intersectObjects(s,!0);if(0===i.length)return[null,0,0];for(const r of i){const e=r.uv;if(void 0===e)continue;const s=t.get(r.object);if(void 0!==s)return[s,e.x,1-e.y]}return[null,0,0]}}class w{constructor(r){this._controllers=new Map,this.driver=null,this.trackController(r.getController(0)),this.trackController(r.getController(1))}get controllers(){return this._controllers.entries()}trackController(r){const e={source:null,pointer:-1};this._controllers.set(r,e),r.addEventListener("connected",(r=>{e.source=r.data,this.registerController(e)})),r.addEventListener("disconnected",(r=>{e.source=null,this.unregisterController(e)})),r.addEventListener("move",(t=>{if(null!==e.source&&-1!==e.pointer&&null!==this.driver){const t=new y(0,0,-1).applyQuaternion(r.quaternion),s=new y;r.getWorldPosition(s),this.driver.handlePointerRay(e.pointer,e.source.gamepad.buttons[0].pressed,s.toArray(),t.toArray())}})),r.userData.pointerHint=o.None}registerController(r){null!==this.driver&&null!==r.source&&-1===r.pointer&&(r.pointer=this.driver.registerPointer())}unregisterController(r){null!==this.driver&&-1!==r.pointer&&this.driver.unregisterPointer(r.pointer),r.pointer=-1}setRayPointerDriver(r){null!==this.driver&&this.clearRayPointerDriver();for(const r of this._controllers.values())this.registerController(r);this.driver=r}clearRayPointerDriver(){for(const r of this._controllers.values())this.unregisterController(r);this.driver=null}onPointerHintChanged(r,e){for(const[t,s]of this._controllers)s.pointer===r&&(t.userData.pointerHint=e)}}export{f as MouseRayPointerSource,P as ThreeRayPointerDriver,m as ThreeRoot,g as ThreeVirtualKeyboardRoot,w as XRControllerRayPointerSource};
