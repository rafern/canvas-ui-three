import{Root as g}from"@rafern/canvas-ui";import{CanvasTexture as D,PlaneGeometry as R,MeshBasicMaterial as x,Mesh as C,Vector2 as m,Object3D as w}from"three";var u=class extends g{constructor(r,o){var n;super(r,o);this.texture=new D(this.viewport.canvas);let t=new R,i=new x({map:this.texture});i.transparent=!0;let s=new C(t,i);this.mesh=new w,this.mesh.add(s),this.transformAlgorithm=(n=o==null?void 0:o.transformAlgorithm)!=null?n:null}set enabled(r){super.enabled=r,this.mesh.visible=r}get enabled(){return super.enabled}resolveLayout(){let r=super.resolveLayout();if(r){let[o,t]=this.dimensions;o=Math.floor(o),t=Math.floor(t);let[i,s]=this.canvasDimensions,n=o/i,a=t/s;this.texture.offset=new m(0,1-a),this.texture.repeat=new m(n,a),this.mesh.children[0].scale.fromArray([o,t,1])}return r}paint(){let r=super.paint();return r&&(this.texture.needsUpdate=!0),this.transformAlgorithm!==null&&(this.transformAlgorithm(this),this.mesh.matrixWorldNeedsUpdate=!0),r}};import{Margin as I}from"@rafern/canvas-ui";import{VirtualKeyboard as A,defaultVirtualKeyboardTemplate as M}from"@rafern/canvas-ui";var p=class extends u{constructor(r,o){var t;super(new I(new A(r,(t=o==null?void 0:o.keyboardTemplate)!=null?t:M)),o);this.keyboardDriver=r}updateVisibility(){this.enabled=this.keyboardDriver.needsInput}};import{Raycaster as S}from"three";import{getPointerEventNormPos as d}from"@rafern/canvas-ui";var f=class{constructor(e,r){this.raycaster=new S;this.driver=null;this.pointers=new Map;this.mousePointerID=null;this.raycaster.camera=e;let o=t=>{let i=this.getPointerID(t);i!==null&&this.castRay(i,...d(t,r),t.buttons,t.shiftKey,t.ctrlKey,t.altKey)};r.addEventListener("pointermove",o),r.addEventListener("pointerdown",o),r.addEventListener("pointerup",o),r.addEventListener("pointerleave",t=>{let i=this.getPointerID(t);this.driver!==null&&i!==null&&this.driver.leaveAnyPointer(i)}),r.addEventListener("wheel",t=>{var c;if(this.mousePointerID===null||this.driver===null)return;let[i,s]=d(t,r),[n,a,l]=this.driver.castRay(...this.getCastOriginDirection(i,s));n!==null&&((c=this.driver)==null||c.wheelPointer(n,this.mousePointerID,a,l,t.deltaX,t.deltaY,t.deltaZ,t.deltaMode,t.shiftKey,t.ctrlKey,t.altKey))})}getCastOriginDirection(e,r){return this.raycaster.setFromCamera({x:e*2-1,y:1-r*2},this.raycaster.camera),[this.raycaster.ray.origin.toArray(),this.raycaster.ray.direction.toArray()]}castRay(e,r,o,t,i,s,n){this.driver!==null&&this.driver.handlePointerRay(e,t,...this.getCastOriginDirection(r,o),i,s,n)}setRayPointerDriver(e){this.driver!==null&&this.clearRayPointerDriver(),this.mousePointerID=e.registerPointer(!1),this.driver=e}clearRayPointerDriver(){var e,r;this.mousePointerID!==null&&((e=this.driver)==null||e.unregisterPointer(this.mousePointerID));for(let o of this.pointers.values())(r=this.driver)==null||r.unregisterPointer(o);this.driver=null,this.mousePointerID=null,this.pointers.clear()}onPointerHintChanged(e,r){}getPointerID(e){let r=this.pointers.get(e.pointerId);if(typeof r=="undefined"){if(r=e.pointerType==="mouse"?this.mousePointerID:null,r===null){if(this.driver===null)return null;r=this.driver.registerPointer(!0)}this.pointers.set(e.pointerId,r)}return r}get mouseID(){return this.mousePointerID}get pointerIDs(){let e=[];this.mousePointerID!==null&&e.push(this.mousePointerID);for(let r of this.pointers.values())e.push(r);return e}};import{Raycaster as T,Ray as K,Vector3 as v}from"three";import{RayPointerDriver as H}from"@rafern/canvas-ui";var y=class extends H{constructor(r){super();this.raycaster=new T;this.raycaster.camera=r}castRay(r,o){this.raycaster.ray=new K(new v(...r),new v(...o));let t=new Map;for(let n of this.states.keys())n instanceof u&&t.set(n.mesh.children[0],n);let i=Array.from(t.keys()),s=this.raycaster.intersectObjects(i);if(s.length===0)return[null,0,0];for(let n of s){let a=n.uv;if(typeof a=="undefined")continue;let l=t.get(n.object);if(typeof l!="undefined")return[l,a.x,1-a.y]}return[null,0,0]}};import{PointerHint as L}from"@rafern/canvas-ui";import{Vector3 as b}from"three";var P=class{constructor(e){this._controllers=new Map;this.driver=null;this.trackController(e.getController(0)),this.trackController(e.getController(1))}get controllers(){return this._controllers.entries()}trackController(e){let r={source:null,pointer:-1};this._controllers.set(e,r),e.addEventListener("connected",o=>{r.source=o.data,this.registerController(r)}),e.addEventListener("disconnected",o=>{r.source=null,this.unregisterController(r)}),e.addEventListener("move",o=>{if(r.source!==null&&r.pointer!==-1&&this.driver!==null){let t=new b(0,0,-1).applyQuaternion(e.quaternion),i=new b;e.getWorldPosition(i);let s=0;if(r.source.gamepad){let n=r.source.gamepad.buttons;for(let a in n){let l=parseInt(a,10);!isNaN(l)&&n[l].pressed&&(s|=1<<l)}}this.driver.handlePointerRay(r.pointer,s,i.toArray(),t.toArray(),!1,!1,!1)}}),e.userData.pointerHint=L.None}registerController(e){this.driver!==null&&e.source!==null&&e.pointer===-1&&(e.pointer=this.driver.registerPointer(!0))}unregisterController(e){this.driver!==null&&e.pointer!==-1&&this.driver.unregisterPointer(e.pointer),e.pointer=-1}setRayPointerDriver(e){this.driver!==null&&this.clearRayPointerDriver();for(let r of this._controllers.values())this.registerController(r);this.driver=e}clearRayPointerDriver(){for(let e of this._controllers.values())this.unregisterController(e);this.driver=null}onPointerHintChanged(e,r){for(let[o,t]of this._controllers)t.pointer===e&&(o.userData.pointerHint=r)}};export{f as MouseRayPointerSource,y as ThreeRayPointerDriver,u as ThreeRoot,p as ThreeVirtualKeyboardRoot,P as XRControllerRayPointerSource};
//# sourceMappingURL=index.esm.js.map
